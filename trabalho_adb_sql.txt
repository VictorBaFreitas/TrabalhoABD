--Questão 1--

--Criando Banco de Dados--

create database TrabalhoABD
    with
    owner = postgres  
    connection limit = -1;

--Banco de Dados--

--TrabalhoABD--

--Sequências criadas--

create sequence sid_paciente start 1;
create sequence sid_medico start 1;
create sequence sid_atende start 1;
create sequence sid_cirurgia start 1;

--Tabelas do Banco--

create table paciente (
	id_paciente integer not null,
	codigo_paciente serial not null unique,
	nome_paciente varchar(255) not null,
	idade_paciente varchar(255) not null,
	constraint pk_paciente primary key (id_paciente)
);

create table medico (
	id_medico integer not null,
	crm_medico varchar(13) not null unique,
	nome_medico varchar(255) not null,
	especialidade_medico varchar(255) not null,
	constraint pk_medico primary key (id_medico)
);

create table atende (
	id_atende integer not null,
	id_paciente integer not null,
	id_medico integer not null,
	data_atende date not null,
	constraint pk_atende primary key (id_atende),
	foreign key (id_paciente) references paciente (id_paciente),
	foreign key (id_medico) references medico (id_medico)
);

create table cirurgia (
	id_cirurgia integer not null,
	codigo_cirurgia varchar(255) not null unique,
	data_cirurgia date not null,
	descricao_cirurgia varchar(255) not null,
	id_paciente integer not null,
	constraint pk_cirurgia primary key (id_cirurgia),
	foreign key (id_paciente) references paciente (id_paciente)
);

--Inserindo itens--

insert into paciente (id_paciente, codigo_paciente, nome_paciente, idade_paciente) values
	(nextval('sid_paciente'), 123456, 'João', 35),
	(nextval('sid_paciente'), 789012, 'Maria', 28),
	(nextval('sid_paciente'), 345678, 'Pedro', 42),
	(nextval('sid_paciente'), 901234, 'Ana', 50),
	(nextval('sid_paciente'), 567890, 'Mariana', 31);

insert into medico (id_medico, crm_medico, nome_medico, especialidade_medico) values
	(nextval('sid_medico'), 987654, 'Dr. Silva', 'Clínico Geral'),
	(nextval('sid_medico'), 654321, 'Dr. Santos', 'Pediatra'),
	(nextval('sid_medico'), 210987, 'Dra. Oliveira', 'Ginecologista'),
	(nextval('sid_medico'), 876543, 'Dr. Almeida', 'Cardiologista'),
	(nextval('sid_medico'), 543210, 'Dra. Costa', 'Dermatologista');

insert into atende (id_atende, id_paciente, id_medico, data_atende) values
	(nextval('sid_atende'), 1, 1, '2024-04-01'),
	(nextval('sid_atende'), 2, 2, '2024-04-02'),
	(nextval('sid_atende'), 3, 3, '2024-04-03'),
	(nextval('sid_atende'), 4, 4, '2024-04-04'),
	(nextval('sid_atende'), 5, 5, '2024-04-05');

insert into cirurgia (id_cirurgia, codigo_cirurgia, data_cirurgia, descricao_cirurgia, id_paciente) values
	(nextval('sid_cirurgia'), 123, '2024-04-10', 'Cirurgia de apendicite', 1),
	(nextval('sid_cirurgia'), 456, '2024-04-15', 'Cirurgia de hérnia', 2),
	(nextval('sid_cirurgia'), 789, '2024-04-20', 'Cirurgia de catarata', 3),
	(nextval('sid_cirurgia'), 321, '2024-04-25', 'Cirurgia cardíaca', 4),
	(nextval('sid_cirurgia'), 654, '2024-04-30', 'Cirurgia plástica', 5);

--Questão 2--

create or replace function criar_cirurgia(
    codigo_cirurgia_input varchar(255),
    codigo_paciente_input integer,
    data_cirurgia_input date,
    descricao_cirurgia_input varchar(255)
)
returns void as
$$
begin
    if exists (select codigo_cirurgia from cirurgia where codigo_cirurgia = codigo_cirurgia_input) then
        raise exception 'Já existe uma cirurgia com o código %.', codigo_cirurgia_input;
    end if;
    
    if not exists (select codigo_paciente from paciente where codigo_paciente = codigo_paciente_input) then
        raise exception 'Paciente com código % não encontrado.', codigo_paciente_input;
    end if;
    
    insert into cirurgia (id_cirurgia, codigo_cirurgia, data_cirurgia, descricao_cirurgia, id_paciente)
    values (nextval('sid_cirurgia'), codigo_cirurgia_input, data_cirurgia_input, descricao_cirurgia_input, 
            (select id_paciente from paciente where codigo_paciente = codigo_paciente_input));
end;
$$
language plpgsql;

select criar_cirurgia('1100', 789012, '2024-04-10', 'Cirurgia de Catarata');

--Questão 3--

create or replace function obter_desempenho_medicos(
    data_inicial_input date,
    data_final_input date
)
returns table (nome_medico varchar(255), quantidade_atendimentos bigint) as
$$
begin
    return query
    select m.nome_medico, count(a.id_atende) as quantidade_atendimentos
    from medico m
    inner join atende a on m.id_medico = a.id_medico
    where a.data_atende between data_inicial_input and data_final_input
    group by m.nome_medico;
end;
$$
language plpgsql;

select * from obter_desempenho_medicos('2024-04-01', '2024-04-30');

--Questão 4--

-- Criando o Trigger
create or replace function verifica_cirurgia()
returns trigger as $$
declare
    qtd_cirurgias integer;
begin
    if not exists (select 1 from paciente where id_paciente = new.id_paciente) then
        raise exception 'Paciente não encontrado!';
    end if;

    if new.data_cirurgia <= current_date then
        raise exception 'Data da cirurgia deve ser posterior à data corrente!';
    end if;

    if new.data_cirurgia < date_trunc('day', now()) then
        raise exception 'Data da cirurgia é inválida!';
    end if;

    select count(*) into qtd_cirurgias
    from cirurgia
    where id_paciente = new.id_paciente 
    and data_cirurgia = new.data_cirurgia;

    if qtd_cirurgias > 0 then
        raise exception 'Já existe uma cirurgia marcada para o mesmo paciente nesta data!';
    end if;

    return new;
end;
$$
language plpgsql;

create trigger trigger_verifica_cirurgia
before insert on cirurgia
for each row execute function verifica_cirurgia();

--Questão 5--

Alternativa D

--Questão 6--

Alternativa E

--Questão 7--

Alternativa E
